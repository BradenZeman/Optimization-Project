help(hello)
bisection(f~-x^2, -2, 3)
devtools::load_all(".")
warnings()
install.packages(Rdpack)
install.packages("Rdpack")
devtools::run_examples()
help(bisection)
devtools::document()
example(bisection)
devtools::run_examples()
devtools::run_examples()
examples(f = expression(log(x)/(1+x);)
example("Optimization")
example("bisection")
devtools::run_examples()
help(secant)
example(secant)
examples(secant)
example(Secant)
devtools::run_examples()
devtools::run_examples(bisection)
devtools::run_examples(Bisection)
devtools::run_examples()
devtools::run_examples()
help(pAnsBrad)
library(mosaic)
library(binom)
library(NSM3)
library(nsm3data)
library(tidyverse)
library(BSDA)
library(agricolae)
library(bootstrap)
library(DescTools)
library(dunn.test)
library(dunn.test)
help(pAnsBrad)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
help(Optimization)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
help(Optimization)
f = expression(log(x)/(1+x))
# Bisection Method
bisection(f, 2, 5, graph = T)
f = expression(-x^2+4*x)
# Secant Method
secant(f, 0, 4, graph = T)
f = expression(-x^2-3*x)
# Newton's Method
newton(f, 0, graph = T)
f = expression(log(x)/(1+x))
bisection(f, 2, 5, graph = T)
f = expression(log(x)/(1+x))
bisection(f, 2, 5, graph = T)
devtools::run_examples()
help(Optimization)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
help(mosaic)
devtools::run_examples()
help(Optimization)
help(Optimization)
f = expression(log(x)/(1+x))
# Bisection Method
bisection(f, 2, 5, graph = T)
f = expression(-x^2+4*x)
# Secant Method
secant(f, 0, 4, graph = T)
f = expression(-x^2-3*x)
# Newton's Method
newton(f, 0, graph = T)
devtools::run_examples()
devtools::run_examples()
help(Optimization)
f = expression(log(x)/(1+x))
# Bisection Method
bisection(f, 2, 5, graph = T)
f = expression(-x^2+4*x)
# Secant Method
secant(f, 0, 4, graph = T)
f = expression(-x^2-3*x)
# Newton's Method
newton(f, 0, graph = T)
help(Optimization)
newton2 = function(f, a, b, n = 10) {
dx = D(f, "x")
dy = D(f, "y")
dx2 = D(dx, "x")
dy2 = D(dy, "y")
dxdy = D(dx, "y")
dydx = D(dy, "x")
evaldx = function(x, y){eval(dx)}
evaldy = function(x, y){eval(dy)}
evaldx2 = function(x, y){eval(dx2)}
evaldy2 = function(x, y){eval(dy2)}
evaldxdy = function(x, y){eval(dxdy)}
evaldydx = function(x, y){eval(dydx)}
g = function(x, y){eval(f)}
xOld = matrix(c(a, b), nrow = 2)
for (x in 1:n) {
dX2 = evaldx2(xOld[1], xOld[2])
dXdY = evaldxdy(xOld[1], xOld[2])
dYdX = evaldydx(xOld[1], xOld[2])
dY2 = evaldx2(xOld[1], xOld[2])
H = matrix(c(dX2, dYdX, dXdY, dY2), nrow = 2)
dX = evaldx(xOld[1], xOld[2])
dY = evaldy(xOld[1], xOld[2])
P = matrix(c(dX, dY), nrow = 2)
xNew = xOld - solve(H)%*%P
xOld = matrix(c(xNew[1], xNew[2]), nrow = 2)
}
z = g(xNew[1], xNew[2])
results = data.frame(Maximum_X = xNew[1], Maximum_Y = xNew[2], Maximum_Z = z)
return(results)
}
f = expression(sqrt(4-x^2-y^2))
newton2(f, 0.5, 1)
f = expression(sqrt(4-(x-2)^2-y^2))
newton2(f, 0.5, 1)
f = expression(sqrt(4-x^2-y^2))
g = function(x, y){eval(f)}
xdomain = seq(-1, 1, 0.01)
ydomain = seq(-1, 1, 0.01)
zdomain = outer(xdomain, ydomain, g)
plot_ly(x=xdomain, y = ydomain, z = zdomain) %>% add_surface()
library(plotly)
f = expression(sqrt(4-x^2-y^2))
g = function(x, y){eval(f)}
xdomain = seq(-1, 1, 0.01)
ydomain = seq(-1, 1, 0.01)
zdomain = outer(xdomain, ydomain, g)
plot_ly(x=xdomain, y = ydomain, z = zdomain) %>% add_surface()
