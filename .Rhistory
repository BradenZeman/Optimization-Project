help(hello)
bisection(f~-x^2, -2, 3)
devtools::load_all(".")
warnings()
install.packages(Rdpack)
install.packages("Rdpack")
devtools::run_examples()
help(bisection)
devtools::document()
example(bisection)
devtools::run_examples()
devtools::run_examples()
examples(f = expression(log(x)/(1+x);)
example("Optimization")
example("bisection")
devtools::run_examples()
help(secant)
example(secant)
examples(secant)
example(Secant)
devtools::run_examples()
devtools::run_examples(bisection)
devtools::run_examples(Bisection)
devtools::run_examples()
devtools::run_examples()
help(pAnsBrad)
library(mosaic)
library(binom)
library(NSM3)
library(nsm3data)
library(tidyverse)
library(BSDA)
library(agricolae)
library(bootstrap)
library(DescTools)
library(dunn.test)
library(dunn.test)
help(pAnsBrad)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
help(Optimization)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
help(Optimization)
f = expression(log(x)/(1+x))
# Bisection Method
bisection(f, 2, 5, graph = T)
f = expression(-x^2+4*x)
# Secant Method
secant(f, 0, 4, graph = T)
f = expression(-x^2-3*x)
# Newton's Method
newton(f, 0, graph = T)
f = expression(log(x)/(1+x))
bisection(f, 2, 5, graph = T)
f = expression(log(x)/(1+x))
bisection(f, 2, 5, graph = T)
devtools::run_examples()
help(Optimization)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
help(mosaic)
devtools::run_examples()
help(Optimization)
help(Optimization)
f = expression(log(x)/(1+x))
# Bisection Method
bisection(f, 2, 5, graph = T)
f = expression(-x^2+4*x)
# Secant Method
secant(f, 0, 4, graph = T)
f = expression(-x^2-3*x)
# Newton's Method
newton(f, 0, graph = T)
devtools::run_examples()
devtools::run_examples()
help(Optimization)
f = expression(log(x)/(1+x))
# Bisection Method
bisection(f, 2, 5, graph = T)
f = expression(-x^2+4*x)
# Secant Method
secant(f, 0, 4, graph = T)
f = expression(-x^2-3*x)
# Newton's Method
newton(f, 0, graph = T)
help(Optimization)
