}
}
dx = D(f, "x")
dx2 = D(dx, "x")
evaldx = function(x){eval(dx)}
evaldx2 = function(x){eval(dx2)}
index = 0
xValues = c()
yValues = c()
b = a + 1
for (x in 1:n) {
xValues = append(xValues, a)
yValues = append(yValues, g(a))
if (abs(a-b)>sigma) {
index = index + 1
xNew = a - (evaldx(a)/evaldx2(a))
b = a
a = xNew
} else {
break
}
}
if (a>b) {
xdomain <- seq(b-1, a+1, 0.001)
ydomain = c()
} else {
xdomain <- seq(a-1, b+1, 0.001)
ydomain = c()
}
Yvalue = g(xNew)
graphing = data.frame(xValues, yValues)
results = data.frame(Maximum_X = xNew, Maximum_Y = Yvalue, Iterations = index, Sigma = sigma)
if (isTRUE(graph)) {
for (x in 1:length(xdomain)) {
ydomain = append(ydomain, g(xdomain[x]))
}
plot(ydomain~xdomain, type="l", xlab = "x", ylab = "y", main = "Plot of Function")
points(xNew, Yvalue, col = "red", pch = 16)
return(list(results, graphing))
} else {
return(results)
}
}
f = expression(log(x)/(1+x))
newton(f, 3)
devtools::run_examples()
devtools::load_all()
f = expression(log(x)/(1+x))
f = expression(log(x)/(1+x))
bisection(2, 2, 5)
bisection(f, c, 5)
bisection(f, 2, c)
bisection(f, 2, 5, n = c)
bisection(f, 2, 5, sigma = c)
bisection(f, 2, 5, graph = c)
f = expression(log(x))
bisection(f, 0, 1)
f = expression(log(x))
bisection(f, -1, 1)
f = expression(log(x)/(1+x))
secant(2, 2, 5)
secant(f, c, 5)
secant(f, 2, c)
secant(f, 2, 5, n = c)
secant(f, 2, 5, sigma = c)
secant(f, 2, 5, graph = c)
f = expression(log(x))
secant(f, 0, 1)
secant(f, -1, 1)
f = expression(log(x)/(1+x))
newton(2, 3)
newton(f, c)
newton(f, 3, n = c)
newton(f, 3, sigma = c)
newton(f, 3, graph = c)
f = expression(log(x))
newton(f, 0)
newton(f, -1)
newton(f, 1)
newton(f, 3)
f = expression(-x^2-3*x)
# Newton's Method
newton(f, 0, graph = T)
f = expression(log(x)/(1+x))
newton(f, 3)
f = expression(sqrt(4-x^2-y^2))
newton2(2, 0.5, 1)
newton2(f, c, 1)
newton2(f, 0.5, c)
newton2(f, 0.5, 1, n=c)
newton2(f, 0.5, 1, sigma=c)
newton2(f, 0.5, 1, graph = c)
newton2(f, 2, 1)
newton2(f, 0.5, 2)
devtools::run_examples()
f = expression(log(x)/(1+x))
bisection(2, 2, 5)
bisection(f, c, 5)
bisection(f, 2, c)
bisection(f, 2, 5, n = c)
bisection(f, 2, 5, sigma = c)
bisection(f, 2, 5, graph = c)
f = expression(log(x))
bisection(f, -1, 1)
f = expression(sqrt(4-x^2-y^2))
newton2(f, 2, 1)
newton2(f, 0.5, 1)
newton2(f, 0.5, 1, graph = T)
f = expression(sqrt(4-(x-2)^2-y^2))
newton2(f, 0.5, 1)
newton2(f, 0.5, 1, graph = TRUE)
devtools::run_examples()
f = expression((x-2)^3+2)
bisection(f, 1, 3)
f = expression((x-2)^3+2)
bisection(f, 1, 3, graph = T)
f = expression(-x^4+x^3+x^2+3)
bisection(f, -1, 0, graph = T)
bisection(f, -1, 2, graph = T)
bisection(f, -1, 1.7, graph = T)
bisection(f, 0,5, 1.7, graph = T)
f = expression(-x^4+x^3+x^2+3)
bisection(f, -1, 1.7, graph = T)
bisection(f, -1, 0, graph = T)
bisection(f, 0.5, 1.7, graph = T)
bisection(f, 0, 0.5, graph = T)
bisection(f, -0.2, 0.5, graph = T)
bisection(f, -0.3, 0.4, graph = T)
f = expression((x-2)^3+2)
bisection(f, 1, 3, graph = T)
secant(f, 1, 3, graph = T)
f = expression((x-2)^3+2)
secant(f, 1, 3, graph = T)
f = expression(-x^2+4*x)
# Secant Method
secant(f, 0, 4, graph = T)
f = expression((x-2)^3+2)
secant(f, 1, 3, graph = T)
secant(f, 1, 2, graph = T)
secant(f, 1, 2.5, graph = T)
secant(f, 1, 3, graph = T)
secant(f, 1.5, 3, graph = T)
secant(f, 1.5, 2.5, graph = T)
secant(f, 2, 3, graph = T)
secant(f, 1.7, 3, graph = T)
secant(f, 1.5, 3, graph = T)
secant(f, 1.6, 3, graph = T)
secant(f, 1, 2.3, graph = T)
secant(f, 1, 2.4, graph = T)
secant(f, 1, 2.5, graph = T)
secant(f, 1.5, 2.5, graph = T)
f = expression(-x^4+x^3+x^2+3)
secant(f, -1, 1.7, graph = T)
secant(f, -1, 1.7, graph = T)
secant(f, -1, 1.8, graph = T)
secant(f, -1, 0, graph = T)
secant(f, -1, -0.1, graph = T)
secant(f, -1, 0, graph = T)
secant(f, 0.5, 1.7, graph = T)
secant(f, -1, -0.3, graph = T)
secant(f, -1, -0.2, graph = T)
bisection(f, -1, 0, graph = T)
secant(f, 0.5, 1.7, graph = T)
secant(f, -0.3, 0.4, graph = T)
f = expression(sqrt(4-x^2-y^2))
newton2(f, 0.5, 1, graph = T)
f = expression((x-2)^3+2)
newton(f, 0, graph = T)
newton(f, 1, graph = T)
newton(f, 1.5, graph = T)
newton(f, 3, graph = T)
f = expression(-x^4+x^3+x^2+3)
newton(f, 0, graph = T)
newton(f, -1, graph = T)
newton(f, 1.5, graph = T)
newton(f, 0, graph = T)
newton(f, 1, graph = T)
newton(f, 0.2, graph = T)
f = expression((x-2)^3+2)
f = expression((x-2)^3+2)
bisection(f, 1, 3, graph = T)
devtools::load_all()
f = expression((x-2)^3+2)
bisection(f, 1, 3, graph = T)
f = expression((x-2)^3+2)
bisection(f, 1, 3, graph = T)
f = expression(-x^4+x^3+x^2+3)
bisection(f, -1, 1.7, graph = T)
bisection(f, -1, 0, graph = T)
bisection(f, -0.3, 0.4, graph = T)
bisection(f, 0.5, 1.7, graph = T)
devtools::load_all()
f = expression((x-2)^3+2)
bisection(f, 1, 3, graph = T)
f = expression((x-2)^3+2)
secant(f, 1.6, 3, graph = T)
secant(f, 1, 2.5, graph = T)
secant(f, 1, 3, graph = T) # Error
secant(f, 1.6, 3, graph = T)
secant(f, 1, 2.5, graph = T)
f = expression((x-2)^3+2)
f = expression(-x^4+x^3+x^2+3)
secant(f, -1, 1.7, graph = T)
secant(f, -1, -0.2, graph = T)
secant(f, -1, 1.7, graph = T)
secant(f, -1, -0.2, graph = T)
secant(f, 0.5, 1.7, graph = T)
secant(f, 0.5, 1.7, graph = T)
secant(f, -0.3, 0.4, graph = T)
devtools::load_all()
devtools::load_all()
f = expression(100*sqrt(abs(y-0.01*x^2))+0.01*abs(x+10))
newton2(f, 0, 0, graph = T)
f = expression(-(1+cos(12*sqrt(x^2+y^2)))/(0.5*(x^2+y^2)+2))
newton2(f, 0, 0, graph = T)
newton2(f, 1, 1, graph = T)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, 0.1, 0.1, graph = T)
newton2(f, 0.05, 0.05, graph = T)
# Gramacy & Lee Function
f = expression((sin(10*pi*x)/(2*x)+(x-1)^4))
bisection(f, 0.5, 2.5, graph = T)
secant(f, 0.5, 2.5, graph = T)
newton(f, 1.5, graph = T)
newton(f, 1, graph = T)
newton(f, 0.5, graph = T)
newton(f, 2, graph = T)
newton(f, 2, graph = T)
newton(f, 2.3, graph = T)
# Levy Function
f = expression(sin(3*pi*x)^2+(x-1)^2*(1+(sin(3*pi*y)^2))+(y-1)^2*(1+(sin(2*pi*y)^2)))
newton2(f, 1.5, 1.5, graph = T)
newton2(f, 1.01, 1.01, graph = T)
newton2(f, 1.5, 1.5, graph = T)
newton2(f, 1.2, 1.2, graph = T)
# Schaffer Function N.2
f = expression(0.5+(sin(x^2-y^2)^2-0.5)/(1+0.001*(x^2+y^2))^2)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, -1, -2, graph = T)
# Schaffer Function N.2
f = expression(0.5+(sin(x^2-y^2)^2-0.5)/(1+0.001*(x^2+y^2))^2)
newton2(f, -1, -2, graph = T)
# Bohachevsky Functions
f = expression(x^2+2*y^2-0.3*cos(3*pi*x)-0.4*cos(4*pi*y)+0.7)
newton2(f, -50, -50, graph = T)
newton2(f, 10, 10, graph = T)
newton2(f, 10, 10,n = 300, graph = T)
newton2(f, 10, 10, graph = T)
newton2(f, 10, 10,n = 500, graph = T)
newton2(f, 5, 5, graph = T)
# Bohachevsky Functions
f = expression(x^2+2*y^2-0.3*cos(3*pi*x)-0.4*cos(4*pi*y)+0.7)
newton2(f, 5, 5, graph = T)
newton2(f, 2, 2, graph = T)
newton2(f, 1.5, -1.5, graph = T)
newton2(f, 0.2, 0.2, graph = T)
# Bohachevsky Functions
f = expression(x^2+2*y^2-0.3*cos(3*pi*x)-0.4*cos(4*pi*y)+0.7)
newton2(f, 10, 10, graph = T)
newton2(f, 1.5, -1.5, graph = T)
newton2(f, 0.2, 0.2, graph = T)
# Booth Function
f = expression((x+2*y-7)^2+(2*x+y-5)^2)
newton2(f, -5, 5, graph = T)
newton2(f, -9, -9, graph = T)
# Sum Square Function
xx = c(x1, x2)
# Sum Square Function
xx = c(x, y)
# Sum Square Function
xx = c(1.2, 2.1)
ii = c(1:length(xx))
sum = sum(ii*xx^2)
f = expression(sum)
newton2(f, 1, 1, graph = T)
sum
f = expression(x^2+y^2)
newton2(f, 1, 1, graph = T)
# Matyas Function
f = expression(0.26*(x^2+y^2)-0.48*x*y)
newton2(f, -5, 5, graph = T)
newton2(f, -9, -9, graph = T)
# Three-Hump Camel Function
f = expression(2*x^2-1.05*x^4+x^6/6+x*y+y*2)
newton2(f, 3, 4, graph = T)
newton2(f, 3, 4,n = 200, graph = T)
newton2(f, 3, 4,n = 300, graph = T)
newton2(f, 3, 4,n = 400, graph = T)
newton2(f, 3, 4,n = 500, graph = T)
newton2(f, 3, 4, graph = T)
newton2(f, -1, -1, graph = T)
# Six-Hump Camel Function
f = expression((4-2.1*x^2+x^4/3)*x^2+x*y+(-4+4*y^2)*y^2)
newton2(f, -2, -1, graph = T)
newton2(f, 1, 1, graph = T)
# Easom Function
f = expression(-cos(x)*cos(y)*exp(-(x-pi)^2-(y-pi)^2))
newton2(f, -50, 50, graph = T)
# Easom Function
f = expression(-cos(x)*cos(y)*exp(-(x-pi)^2-(y-pi)^2))
newton2(f, -20, 10, graph = T)
newton2(f, -10, 10, graph = T)
newton2(f, 2, 2, graph = T)
newton2(f, 3, 3, graph = T)
newton2(f, -10, 10, graph = T)
newton2(f, -12, 10, graph = T)
newton2(f, -9, 10, graph = T)
newton2(f, -9, 10,n =300, graph = T)
devtools::load_all()
f = expression(sin(pi*x)*exp(-(pi)^2*y))
newton2(f, 0, 0, graph = T)
newton2(f, 0.1, 0.1, graph = T)
newton2(f, 0.49, 0.01, graph = T)
f = expression(sin(pi*x)*exp(-(pi)^2*10))
newton(f, 0, graph = T)
newton(f, 0.1, graph = T)
f = expression(sin(pi*x)*exp(-(pi)^2*10))
newton(f, 0.5, graph = T)
f = expression(sin(pi*x)*exp(-(pi)^2*1))
newton(f, 0.5, graph = T)
f = expression(sin(pi*x)*exp(-(pi)^2*2))
newton(f, 0.3, graph = T)
f = expression(sin(pi*0.5)*exp(-(pi)^2*x))
newton(f, 0.3, graph = T)
f = expression(sin(pi*x)*exp(-(pi)^2*5))
newton(f, 0.3, graph = T)
newton(f, 0.2, graph = T)
devtools::load_all()
# Bohachevsky Function
# Global Min at (0,0,0)
f = expression(x^2+2*y^2-0.3*cos(3*pi*x)-0.4*cos(4*pi*y)+0.7)
newton2(f, 10, 10, graph = T)
newton2(f, 1.5, -1.5, graph = T)
newton2(f, 0.2, 0.2, graph = T)
# Booth Function
f = expression((x+2*y-7)^2+(2*x+y-5)^2)
newton2(f, -5, 5, graph = T)
# Matyas Function
# Global Min at (0,0,0)
f = expression(0.26*(x^2+y^2)-0.48*x*y)
newton2(f, -5, 5, graph = T)
newton2(f, -9, -9, graph = T)
# Three-Hump Camel Function
f = expression(2*x^2-1.05*x^4+x^6/6+x*y+y*2)
newton2(f, 3, 4, graph = T)
newton2(f, -1, -1, graph = T)
newton2(f, 0.2, 0.2, graph = T)
# Bohachevsky Function
# Global Min at (0,0,0)
f = expression(x^2+2*y^2-0.3*cos(3*pi*x)-0.4*cos(4*pi*y)+0.7)
newton2(f, 0.2, 0.2, graph = T)
newton2(f, 0.01, 0.01, graph = T)
newton2(f, 0.01, 0.01, n = 200 graph = T)
newton2(f, 0.01, 0.01, n = 200, graph = T)
# Drop-Wave function
# Global Min at (0,0,-1)
f = expression(-(1+cos(12*sqrt(x^2+y^2)))/(0.5*(x^2+y^2)+2))
newton2(f, 1, 1, graph = T)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, 0.05, 0.05, graph = T)
# Levy Function N.13
f = expression(sin(3*pi*x)^2+(x-1)^2*(1+(sin(3*pi*y)^2))+(y-1)^2*(1+(sin(2*pi*y)^2)))
newton2(f, 1.2, 1.2, graph = T)
newton2(f, 1.01, 1.01, graph = T)
# Schaffer Function N.2
# Global Min at (0,0,0)
f = expression(0.5+(sin(x^2-y^2)^2-0.5)/(1+0.001*(x^2+y^2))^2)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, -1, -2, graph = T)
# Global Max at ()
f = expression(-x^2+4*x)
bisection(f, 0, 4, graph = T)
secant(f, 0, 4, graph = T)
newton(f, 1, graph = T)
bisection(f, -1, 1.7, graph = T)
f = expression(-x^4+x^3+x^2+3)
bisection(f, -1, 1.7, graph = T)
bisection(f, -1, 0, graph = T)
bisection(f, 0.5, 1.7, graph = T)
bisection(f, -0.3, 0.4, graph = T)
bisection(f, -1, 1.7, graph = T)
bisection(f, -1, 0, graph = T)
bisection(f, -0.3, 0.4, graph = T)
bisection(f, 0.5, 1.7, graph = T)
# Global Min at (0,0,0)
f = expression(x^2+y^2)
newton2(f, 1, 1, graph = T)
f = expression((x-2)^3+2)
devtools::load_all()
f = expression((x-2)^3+2)
newton(f, 0, graph = T)
f = expression(-x^4+x^3+x^2+3)
newton(f, 0, graph = T)
newton(f, 0.2, graph = T)
newton(f, -1, graph = T)
newton(f, 1, graph = T)
devtools::load_all()
# Drop-Wave function
# Global Min at (0,0,-1)
f = expression(-(1+cos(12*sqrt(x^2+y^2)))/(0.5*(x^2+y^2)+2))
newton2(f, 1, 1, graph = T)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, 0.05, 0.05, graph = T)
devtools::load_all()
devtools::load_all()
# Gramacy & Lee Function
f = expression((sin(10*pi*x)/(2*x)+(x-1)^4))
# Gramacy & Lee Function
f = expression((sin(10*pi*x)/(2*x)+(x-1)^4))
bisection(f, 0.5, 2.5, graph = T)
secant(f, 0.5, 2.5, graph = T)
newton(f, 1.5, graph = T)
devtools::load_all()
# Global Max at (2,4)
f = expression(-x^2+4*x)
bisection(f, 0, 4, graph = T)
secant(f, 0, 4, graph = T)
newton(f, 1, graph = T)
# Local Max at (-0.425, 3.071)
# Local Min at (0,3)
# Global Max at (1.175, 4.097)
f = expression(-x^4+x^3+x^2+3)
bisection(f, -1, 1.7, graph = T)
bisection(f, -1, 0, graph = T)
bisection(f, -0.3, 0.4, graph = T)
bisection(f, 0.5, 1.7, graph = T)
# Global Min at (0,0,0)
f = expression(x^2+y^2)
newton2(f, 1, 1, graph = T)
# Booth Function
# Global Min at (1,3,0)
f = expression((x+2*y-7)^2+(2*x+y-5)^2)
newton2(f, -5, 5, graph = T)
newton2(f, -9, -9, graph = T)
# Matyas Function
# Global Min at (0,0,0)
f = expression(0.26*(x^2+y^2)-0.48*x*y)
newton2(f, -5, 5, graph = T)
newton2(f, -9, -9, graph = T)
# Bohachevsky Function
# Global Min at (0,0,0)
f = expression(x^2+2*y^2-0.3*cos(3*pi*x)-0.4*cos(4*pi*y)+0.7)
newton2(f, 10, 10, graph = T)
newton2(f, 1.5, -1.5, graph = T)
newton2(f, 0.2, 0.2, graph = T)
newton2(f, 0.01, 0.01, graph = T)
# Three-Hump Camel Function
# Global Min at (0,0,0)
f = expression(2*x^2-1.05*x^4+x^6/6+x*y+y*2)
newton2(f, 3, 4, graph = T)
newton2(f, -1, -1, graph = T)
# Drop-Wave function
# Global Min at (0,0,-1)
f = expression(-(1+cos(12*sqrt(x^2+y^2)))/(0.5*(x^2+y^2)+2))
newton2(f, 1, 1, graph = T)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, 0.05, 0.05, graph = T)
# Levy Function N.13
# Global Min at (1,1,0)
f = expression(sin(3*pi*x)^2+(x-1)^2*(1+(sin(3*pi*y)^2))+(y-1)^2*(1+(sin(2*pi*y)^2)))
newton2(f, 1.2, 1.2, graph = T)
newton2(f, 1.01, 1.01, graph = T)
# Schaffer Function N.2
# Global Min at (0,0,0)
f = expression(0.5+(sin(x^2-y^2)^2-0.5)/(1+0.001*(x^2+y^2))^2)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, -1, -2, graph = T)
devtools::load_all()
# Global Max at (2,4)
f = expression(-x^2+4*x)
bisection(f, 0, 4, graph = T)
secant(f, 0, 4, graph = T)
newton(f, 1, graph = T)
# Local Max at (-0.425, 3.071)
# Local Min at (0,3)
# Global Max at (1.175, 4.097)
f = expression(-x^4+x^3+x^2+3)
bisection(f, -1, 1.7, graph = T)
bisection(f, -1, 0, graph = T)
bisection(f, -0.3, 0.4, graph = T)
bisection(f, 0.5, 1.7, graph = T)
# Global Min at (0,0,0)
f = expression(x^2+y^2)
newton2(f, 1, 1, graph = T)
# Booth Function
# Global Min at (1,3,0)
f = expression((x+2*y-7)^2+(2*x+y-5)^2)
newton2(f, -5, 5, graph = T)
newton2(f, -9, -9, graph = T)
# Matyas Function
# Global Min at (0,0,0)
f = expression(0.26*(x^2+y^2)-0.48*x*y)
newton2(f, -5, 5, graph = T)
bisection(f, -1, 1.7, graph = T)
newton2(f, -9, -9, graph = T)
# Bohachevsky Function
# Global Min at (0,0,0)
f = expression(x^2+2*y^2-0.3*cos(3*pi*x)-0.4*cos(4*pi*y)+0.7)
newton2(f, 10, 10, graph = T)
newton2(f, 1.5, -1.5, graph = T)
newton2(f, 0.01, 0.01, graph = T)
# Three-Hump Camel Function
# Global Min at (0,0,0)
f = expression(2*x^2-1.05*x^4+x^6/6+x*y+y*2)
newton2(f, 3, 4, graph = T)
newton2(f, -1, -1, graph = T)
# Drop-Wave function
# Global Min at (0,0,-1)
f = expression(-(1+cos(12*sqrt(x^2+y^2)))/(0.5*(x^2+y^2)+2))
newton2(f, 1, 1, graph = T)
newton2(f, 0.5, 0.5, graph = T)
newton2(f, 0.05, 0.05, graph = T)
